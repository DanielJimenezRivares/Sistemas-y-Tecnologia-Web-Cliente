{"mappings":"ACAA,MAAM,uBAAuB,YAC3B,WAAW,oBAAqB,CAAE,MAAO,CAAC,QAAQ,AAAE,CAEpD,aAAc,CACZ,KAAK,GACL,QAAQ,GAAG,CAAC,yCAEZ,IAAM,EAAO,IAAI,CAAC,YAAY,CAAC,CAAE,KAAM,QAAS,GAC1C,EAAM,SAAS,cAAc,CAAC,uBACpC,EAAK,WAAW,CAAC,EAAI,OAAO,CAAC,SAAS,CAAC,CAAA,IAEvC,IAAI,CAAC,MAAM,CAAG,EAAK,cAAc,CAAC,SAElC,IAAI,CAAC,MAAM,CAAG,EAKd,IAAI,CAAC,CAAA,CAAO,EACd,CAEA,mBAAoB,CAAE,QAAQ,GAAG,CAAC,yDAA0D,IAAI,CAAC,CAAA,CAAO,EAAG,CAC3G,sBAAuB,CAAE,QAAQ,GAAG,CAAC,2DAA6D,CAElG,yBAAyB,CAAI,CAAE,CAAQ,CAAE,CAAQ,CAAE,CACjD,QAAQ,GAAG,CAAC,CAAC,mDAA4C,EAAE,EAAK,CAAC,CAAC,CAAE,CAAE,SAAA,EAAU,SAAA,CAAS,GAC5E,UAAT,GAAoB,IAAa,IACnC,IAAI,CAAC,MAAM,CAAG,IAAI,CAAC,CAAA,CAAO,CAAC,EAAU,IAAI,CAAC,MAAM,EAChD,IAAI,CAAC,CAAA,CAAO,GAEhB,CAGA,IAAI,OAAQ,CAAE,OAAO,IAAI,CAAC,MAAM,AAAE,CAClC,IAAI,MAAM,CAAC,CAAE,CAAE,IAAI,CAAC,YAAY,CAAC,QAAS,OAAO,IAAI,CAAC,CAAA,CAAM,CAAC,IAAM,CAEnE,KAAM,CACC,IAAI,CAAC,WAAW,EACrB,CAAA,IAAI,CAAC,KAAK,CAAG,IAAI,CAAC,MAAM,CAAG,CAAA,CAC7B,CAEA,KAAM,CACC,IAAI,CAAC,WAAW,EACrB,CAAA,IAAI,CAAC,KAAK,CAAG,IAAI,CAAC,MAAM,CAAG,CAAA,CAC7B,CAGA,CAAA,CAAO,GAAK,IAAI,CAAC,MAAM,CAAC,WAAW,CAAG,IAAI,CAAC,MAAM,AAAE,CAGnD,CAAA,CAAO,CAAC,CAAG,CAAE,CAAQ,EACnB,IAAM,EAAI,OAAO,GACjB,OAAO,OAAO,QAAQ,CAAC,GAAK,IAAI,CAAC,CAAA,CAAM,CAAC,GAAK,IAAI,CAAC,CAAA,CAAM,CAAC,EAC3D,CACA,CAAA,CAAM,CAAC,CAAC,EAAI,OAAO,KAAK,GAAG,CAAC,EAAG,EAAI,CACrC,CAEA,eAAe,MAAM,CAAC,kBAAmB,gBAGzC,IAAM,MAAQ,SAAS,cAAc,CAAC,SAChC,UAAY,SAAS,cAAc,CAAC,cACpC,UAAY,SAAS,cAAc,CAAC,cACpC,OAAY,SAAS,cAAc,CAAC,WACpC,OAAY,SAAS,cAAc,CAAC,WAGpC,KAAO,IAAI,eAEjB,UAAU,gBAAgB,CAAC,QAAS,KAC9B,AAAC,MAAM,QAAQ,CAAC,OAClB,MAAM,eAAe,CAAC,KAE1B,GAEA,UAAU,gBAAgB,CAAC,QAAS,KAC9B,MAAM,QAAQ,CAAC,OACjB,MAAM,WAAW,CAAC,KAEtB,GAEA,OAAO,gBAAgB,CAAC,QAAS,IAAM,KAAK,GAAG,IAC/C,OAAO,gBAAgB,CAAC,QAAS,IAAM,KAAK,GAAG","sources":["<anon>","js/component.js"],"sourcesContent":["class ContadorSimple extends HTMLElement {\n    static get observedAttributes() {\n        return [\n            \"value\"\n        ];\n    }\n    constructor(){\n        super();\n        console.log(\"[ContadorSimple] Creado (constructor)\");\n        const root = this.attachShadow({\n            mode: \"closed\"\n        });\n        const tpl = document.getElementById(\"tpl-contador-simple\");\n        root.appendChild(tpl.content.cloneNode(true));\n        this.$value = root.getElementById(\"value\");\n        this._value = 0;\n        // if (!this.hasAttribute(\"value\")) {\n        //   this.setAttribute(\"value\", \"0\");\n        // }\n        this.#render();\n    }\n    connectedCallback() {\n        console.log(\"[ContadorSimple] Adjuntado al DOM (connectedCallback)\");\n        this.#render();\n    }\n    disconnectedCallback() {\n        console.log(\"[ContadorSimple] Separado del DOM (disconnectedCallback)\");\n    }\n    attributeChangedCallback(name, oldValue, newValue) {\n        console.log(`[ContadorSimple] attributeChangedCallback \\u{2192} ${name}:`, {\n            oldValue,\n            newValue\n        });\n        if (name === \"value\" && oldValue !== newValue) {\n            this._value = this.#coerce(newValue, this._value);\n            this.#render();\n        }\n    }\n    // API pública\n    get value() {\n        return this._value;\n    }\n    set value(v) {\n        this.setAttribute(\"value\", String(this.#clamp(v)));\n    }\n    inc() {\n        if (!this.isConnected) return;\n        this.value = this._value + 1;\n    }\n    dec() {\n        if (!this.isConnected) return;\n        this.value = this._value - 1;\n    }\n    // Render\n    #render() {\n        this.$value.textContent = this._value;\n    }\n    // Helpers\n    #coerce(raw, fallback) {\n        const n = Number(raw);\n        return Number.isFinite(n) ? this.#clamp(n) : this.#clamp(fallback);\n    }\n    #clamp(n) {\n        return Math.max(0, n);\n    }\n}\ncustomElements.define(\"contador-simple\", ContadorSimple);\n// ===== Lógica de la página (4 botones) =====\nconst mount = document.getElementById(\"mount\");\nconst btnAttach = document.getElementById(\"btn-attach\");\nconst btnDetach = document.getElementById(\"btn-detach\");\nconst btnInc = document.getElementById(\"btn-inc\");\nconst btnDec = document.getElementById(\"btn-dec\");\n// Una única instancia para ver constructor una sola vez\nconst comp = new ContadorSimple();\nbtnAttach.addEventListener(\"click\", ()=>{\n    if (!mount.contains(comp)) mount.replaceChildren(comp);\n});\nbtnDetach.addEventListener(\"click\", ()=>{\n    if (mount.contains(comp)) mount.removeChild(comp);\n});\nbtnInc.addEventListener(\"click\", ()=>comp.inc());\nbtnDec.addEventListener(\"click\", ()=>comp.dec());\n\n//# sourceMappingURL=CicloVida.ea704840.js.map\n","class ContadorSimple extends HTMLElement {\r\n  static get observedAttributes() { return [\"value\"]; }\r\n\r\n  constructor() {\r\n    super();\r\n    console.log(\"[ContadorSimple] Creado (constructor)\");\r\n\r\n    const root = this.attachShadow({ mode: \"closed\" });\r\n    const tpl = document.getElementById(\"tpl-contador-simple\");\r\n    root.appendChild(tpl.content.cloneNode(true));\r\n\r\n    this.$value = root.getElementById(\"value\");\r\n    \r\n    this._value = 0;\r\n    // if (!this.hasAttribute(\"value\")) {\r\n    //   this.setAttribute(\"value\", \"0\");\r\n    // }\r\n    \r\n    this.#render();\r\n  }\r\n\r\n  connectedCallback() { console.log(\"[ContadorSimple] Adjuntado al DOM (connectedCallback)\"); this.#render();}\r\n  disconnectedCallback() { console.log(\"[ContadorSimple] Separado del DOM (disconnectedCallback)\"); }\r\n\r\n  attributeChangedCallback(name, oldValue, newValue) {\r\n    console.log(`[ContadorSimple] attributeChangedCallback → ${name}:`, { oldValue, newValue });\r\n    if (name === \"value\" && oldValue !== newValue) {\r\n      this._value = this.#coerce(newValue, this._value);\r\n      this.#render();\r\n    }\r\n  }\r\n\r\n  // API pública\r\n  get value() { return this._value; }\r\n  set value(v) { this.setAttribute(\"value\", String(this.#clamp(v))); }\r\n\r\n  inc() {\r\n    if (!this.isConnected) return;\r\n    this.value = this._value + 1;\r\n  }\r\n\r\n  dec() {\r\n    if (!this.isConnected) return;\r\n    this.value = this._value - 1;\r\n  }\r\n\r\n  // Render\r\n  #render() { this.$value.textContent = this._value; }\r\n\r\n  // Helpers\r\n  #coerce(raw, fallback) {\r\n    const n = Number(raw);\r\n    return Number.isFinite(n) ? this.#clamp(n) : this.#clamp(fallback);\r\n  }\r\n  #clamp(n) { return Math.max(0, n); } // mínimo 0\r\n}\r\n\r\ncustomElements.define(\"contador-simple\", ContadorSimple);\r\n\r\n// ===== Lógica de la página (4 botones) =====\r\nconst mount = document.getElementById(\"mount\");\r\nconst btnAttach = document.getElementById(\"btn-attach\");\r\nconst btnDetach = document.getElementById(\"btn-detach\");\r\nconst btnInc    = document.getElementById(\"btn-inc\");\r\nconst btnDec    = document.getElementById(\"btn-dec\");\r\n\r\n// Una única instancia para ver constructor una sola vez\r\nconst comp = new ContadorSimple();\r\n\r\nbtnAttach.addEventListener(\"click\", () => {\r\n  if (!mount.contains(comp)) {\r\n    mount.replaceChildren(comp);\r\n  }\r\n});\r\n\r\nbtnDetach.addEventListener(\"click\", () => {\r\n  if (mount.contains(comp)) {\r\n    mount.removeChild(comp);\r\n  }\r\n});\r\n\r\nbtnInc.addEventListener(\"click\", () => comp.inc());\r\nbtnDec.addEventListener(\"click\", () => comp.dec());\r\n\r\n"],"names":["ContadorSimple","HTMLElement","observedAttributes","console","log","root","attachShadow","mode","tpl","document","getElementById","appendChild","content","cloneNode","$value","_value","connectedCallback","disconnectedCallback","attributeChangedCallback","name","oldValue","newValue","value","v","setAttribute","String","inc","isConnected","dec","textContent","raw","fallback","n","Number","isFinite","Math","max","customElements","define","mount","btnAttach","btnDetach","btnInc","btnDec","comp","addEventListener","contains","replaceChildren","removeChild"],"version":3,"file":"CicloVida.ea704840.js.map"}